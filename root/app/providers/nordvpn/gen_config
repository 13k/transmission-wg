#!/usr/bin/with-contenv bash
# vim: ft=sh
# shellcheck shell=bash

set -o pipefail

# shellcheck source=root/app/lib.sh
source "/app/lib.sh"

wait_service "nordvpn" || exit $?

CREDENTIALS_FILE="${PROVIDERS_PREFIX:?}/nordvpn/credentials.txt"
IFACE="nordlynx"

random_server() {
	nordvpn countries |
		sed -re 's/, /\n/g' |
		shuf -n 1
}

gen_wg_config() {
	local username="${1:?}"
	local password="${2:?}"
	local server="${3:?}"
	local output="${4:?}"

	local local_net

	local_net="$(ip route | tail -1 | awk '{print $1}')" ||
		return $?

	nordvpn set technology "nordlynx" ||
		return $?

	nordvpn logout >/dev/null

	nordvpn login --legacy --username "$username" --password "$password" ||
		return $?

	local connect_args=()

	if [[ "$server" != "best" ]]; then
		connect_args+=("$server")
	fi

	nordvpn connect "${connect_args[@]}" ||
		return $?

	local cidr

	cidr="$(ip -br addr show dev "${IFACE:?}" | awk '{print $3}')" ||
		return $?

	wg showconf "${IFACE:?}" |
		sed -re "/^\[Interface\]/ a Address = $cidr" >"$output" ||
		return $?

	nordvpn whitelist add subnet "$local_net" ||
		return $?

	# nordvpn disconnect ||
	# 	return $?

	touch "$output.noconn" ||
		return $?

	chmod 600 "$output"
}

main() {
	local username="$NORDVPN_USERNAME"
	local password="$NORDVPN_PASSWORD"
	local server="$NORDVPN_SERVER"

	if [[ -n "$username" && -n "$password" ]]; then
		write_credentials "$username" "$password" "${CREDENTIALS_FILE:?}" ||
			fatalw "Failed to write wireguard credentials. Fix the issues and restart the container"
	else
		if [[ -r "${CREDENTIALS_FILE:?}" ]]; then
			local -A credentials

			read_credentials "${CREDENTIALS_FILE:?}" credentials ||
				fatalf "Failed to read credentials from %s" "${CREDENTIALS_FILE:?}"

			username="${credentials["username"]}"
			password="${credentials["password"]}"
		fi
	fi

	if [[ -z "$username" || -z "$password" ]]; then
		fatalw "NORDVPN_USERNAME or NORDVPN_PASSWORD is not set. Configure these environment variables and restart the container"
	fi

	if [[ -z "$server" ]]; then
		server="best"
	fi

	if [[ "$server" == "random" ]]; then
		infof "Selecting random server"

		server="$(random_server)" ||
			fatalf "Failed to select random server"
	fi

	infof "Selected server: %s" "${server@Q}"

	gen_wg_config "$username" "$password" "$server" "${WG_CONFIG:?}" ||
		fatalw "Failed to generate wireguard config. Fix the issues and restart the container"
}

main
